#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

function findTSFiles(dir, excludePatterns = []) {
  const files = [];

  function walkDir(currentPath) {
    const items = fs.readdirSync(currentPath, { withFileTypes: true });

    for (const item of items) {
      const fullPath = path.join(currentPath, item.name);

      if (item.isDirectory()) {
        walkDir(fullPath);
      } else if (item.isFile() && item.name.endsWith('.ts')) {
        // Check if file should be excluded
        const shouldExclude = excludePatterns.some((pattern) => {
          const regex = new RegExp(pattern);
          return regex.test(item.name) || regex.test(fullPath);
        });

        if (!shouldExclude) {
          // Check if file has content (not empty)
          const content = fs.readFileSync(fullPath, 'utf8').trim();
          if (content.length > 0) {
            files.push(fullPath);
          }
        }
      }
    }
  }

  walkDir(dir);
  return files;
}

function generateBarrel(directory, outputFile, extraExports = []) {
  const excludePatterns = ['.*\\.test\\.ts$', '.*\\.spec\\.ts$', 'e2e\\.test\\.ts$', 'index\\.ts$'];

  const tsFiles = findTSFiles(directory, excludePatterns);
  const exports = [];

  // Add extra exports first
  extraExports.forEach((exportPath) => {
    exports.push(`export * from '${exportPath}';`);
  });

  tsFiles.forEach((file) => {
    const relativePath = path.relative(directory, file);
    const importPath = './' + relativePath.replace(/\.ts$/, '').replace(/\\/g, '/');
    exports.push(`export * from '${importPath}';`);
  });

  const content = [
    '/**',
    ' * @file Automatically generated barrel exports',
    ' * Generated by scripts/generate-barrels.js',
    ' */',
    '',
    ...exports,
    '',
  ].join('\n');

  fs.writeFileSync(outputFile, content);
  console.log(`Generated ${outputFile} with ${exports.length} exports`);
}

// Generate server barrel with core exports
const serverDir = path.join(__dirname, '../src/server');
const serverIndex = path.join(serverDir, 'index.ts');
const coreExports = [
  '../core/bus/event-emitter',
  '../core/bus/hook-bus',
  '../core/logger',
  '../version',
];
generateBarrel(serverDir, serverIndex, coreExports);

// Generate client barrel
const clientDir = path.join(__dirname, '../src/client');
const clientIndex = path.join(clientDir, 'index.ts');
generateBarrel(clientDir, clientIndex);

// Generate shared barrel
const sharedDir = path.join(__dirname, '../src/shared');
const sharedIndex = path.join(sharedDir, 'index.ts');
generateBarrel(sharedDir, sharedIndex);
